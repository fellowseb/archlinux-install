#! /bin/env bash

#
# dotfiles management script
#

REPO_PATH=$(readlink -f $HOME/.local/share/dotfiles/repo)
SETUPS_DIR=$REPO_PATH/setups
SETUPS=()
PACKAGES=()

## HELPER FUNCTIONS ##

#
# Error display
#
err() {
  echo "ERROR: $@" >&2
}

#
# Get list of setups
#
get_setups() {
  for entry in $(ls $SETUPS_DIR); do
    [[ -d $SETUPS_DIR/$entry ]] && SETUPS[${#SETUPS[*]}]=$entry
  done
}

#
# Get list of packages for given setup
#
get_packages() {
  local setup=$1
  for entry in $(ls $SETUPS_DIR/$setup); do
    [[ -d $SETUPS_DIR/$setup/$entry ]] && PACKAGES[${#PACKAGES[*]}]=$entry
  done
}

array_contains() {
  local item=$1
  shift
  local arr=$@
  for i in ${arr[*]}; do
    [[ $item == $i ]] && return 0
  done
  return 1
}

check_extra_args() {
  if [[ $# > 0 ]]; then
    err "Unrecognized extra arguments $@"
    return 1
  fi
}

check_install() {
  [[ -n $REPO_PATH ]]
}

## ACTIONS ##

#
# Action: help
# Displays usage
#
help() {
  cat << EOF
fellowsebs dotfiles management

Usage
  dotfiles list-setups
  dotfiles list-packages <setup>
  dotfiles list-files <setup> <package>
  dotfiles add <setup> <package> <file>...
  dotfiles install <setup>
  dotfiles uninstall
  dotfiles clone <source_setup> <target_setup> [<package>...]
  dotfiles [help]
EOF
}

#
# Action: list-setups
# List available setups
#
list-setups() {
  check_extra_args $* || return 1
  get_setups && echo $SETUPS
}

#
# Action: list-packages
# List available packages in given setup
#
list-packages() {
  local setup=$1
  if [[ -z $setup ]]; then
    err "Missing required setup param"
    return 1
  fi
  shift && check_extra_args $* || return 1
  get_setups
  array_contains $setup ${SETUPS[*]}
  if [[ $? == 1 ]]; then
    err "$setup is not a valid setup"
    return 1
  fi
  get_packages $setup
  echo ${PACKAGES[*]}
}

main() {
  # Check if installation is coorect
  if ! check_install; then
    err "Please launch install.sh"
    exit 2
  fi

  # Retrieve action from params and launch function
  local ACTION=${1:-help}
  shift
  case $ACTION in
    list-setups|list-packages|list-files|add|install|uninstall|clone|help)
      $ACTION $@ || (help && exit 1)
      ;;
    *)
      err "$ACTION is not a valid action."
      help
      exit 1
      ;;
  esac
}

main $@
